---
- name: Install podman
  yum: pkg=podman
       state=installed

- name: Create container log dir
  ansible.builtin.file:
    path: /var/log/containers
    state: directory
    mode: '0755'
  tags: grafana

# Set to group wheel and 775 to allow syncing of dashboards etc
- name: Create grafana provisioning dir
  ansible.builtin.file:
    path: /etc/grafana/provisioning
    state: directory
    group: "{{ hostvars[inventory_hostname]['grafana_group_perms'] | default(grafana_group_perms) }}"
    mode: '0775'
  tags: grafana

- name: Create grafana provisioning sub dirs
  ansible.builtin.file:
    path: /etc/grafana/provisioning/{{ item }}/
    state: directory
    group: "{{ hostvars[inventory_hostname]['grafana_group_perms'] | default(grafana_group_perms) }}"
    mode: '0775'
  tags: grafana
  with_items:
    - datasources
    - dashboards

- name: create grafana prometheus datasource template file
  template: src=grafana-prometheus-datasource.j2 dest=/etc/grafana/provisioning/datasources/prometheus.yml
  when: (groups[prometheus_group] is defined) and (groups[prometheus_group] | type_debug == 'list') and (groups[prometheus_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: create grafana thanos datasource template file
  template: src=grafana-thanos-datasource.j2 dest=/etc/grafana/provisioning/datasources/thanos.yml
  when: (groups[thanos_group] is defined) and (groups[thanos_group] | type_debug == 'list') and (groups[thanos_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: create grafana loki datasource template file
  template: src=grafana-loki-datasource.j2 dest=/etc/grafana/provisioning/datasources/loki.yml
  when: (groups[loki_group] is defined) and (groups[loki_group] | type_debug == 'list') and (groups[loki_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: create grafana prometheus dashboards template file
  template: src=grafana-dashboards-datasource.j2 dest=/etc/grafana/provisioning/dashboards/dashboard.yml
  tags: grafana
  notify: Restart Grafana

####
# haproxy.json  libvirt-dashboard.json  loki-and-promtail.json  node-exporter-full_rev29.json  podman_rev1.json  prometheus-overview.json
####

- name: copy haproxy dashboard
  ansible.builtin.copy:
    src: files/dashboards/haproxy.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  when: (groups[haproxy_exporter_group] is defined) and (groups[haproxy_exporter_group] | type_debug == 'list') and (groups[haproxy_exporter_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: copy libvirt dashboard
  ansible.builtin.copy:
    src: files/dashboards/libvirt-dashboard.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  when: (groups[libvirt_exporter_group] is defined) and (groups[libvirt_exporter_group] | type_debug == 'list') and (groups[libvirt_exporter_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: copy node exporter dashboard
  ansible.builtin.copy:
    src: files/dashboards/node-exporter-full_rev29.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  when: (groups[node_exporter_group] is defined) and (groups[node_exporter_group] | type_debug == 'list') and (groups[node_exporter_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: copy loki and promtail dashboard
  ansible.builtin.copy:
    src: files/dashboards/loki-and-promtail.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  when: (groups[loki_group] is defined) and (groups[loki_group] | type_debug == 'list') and (groups[loki_group] | length > 0)
  tags: grafana
  notify: Restart Grafana

- name: copy podman exporter dashboard
  ansible.builtin.copy:
    src: files/dashboards/podman_rev1.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  tags: grafana
  notify: Restart Grafana

- name: copy prometheus dashboard
  ansible.builtin.copy:
    src: files/dashboards/prometheus-overview.json
    dest: /etc/grafana/provisioning/dashboards/
    owner: root
    group: root
    mode: '0664'
  tags: grafana
  notify: Restart Grafana

#- name: sync grafana dashboards
#  become: no
#  ansible.posix.synchronize:
#    src: files/dashboards
#    dest: /etc/grafana/provisioning/
#    times: false
#    perms: false
#    owner: false
#    group: false
#  tags: grafana
#  notify: Restart Grafana

- name: Run grafana container
  containers.podman.podman_container:
    name: "{{ grafana_name }}"
    image: "{{ grafana_container }}"
    state: started
    restart: true
    recreate: yes
    ports:
      - "{{ grafana_port }}:{{ grafana_port }}"
    volume:
      - "/etc/grafana/provisioning/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml"
      - "/etc/grafana/provisioning/datasources/thanos.yml:/etc/grafana/provisioning/datasources/thanos.yml"
      - "/etc/grafana/provisioning/datasources/loki.yml:/etc/grafana/provisioning/datasources/loki.yml"
      - "/etc/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards"
    log_options: "path=/var/log/containers/{{ grafana_name }}.json"
    log_driver: k8s-file
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
      names: true
      container_prefix: monitoring
  tags: grafana

- name: enable and start grafana service
  ansible.builtin.systemd:
    daemon_reload: true
    state: started
    enabled: yes
    name: "monitoring-{{ grafana_name }}"
  tags: grafana
